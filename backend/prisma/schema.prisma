generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Todo {
  id             Int              @id @default(autoincrement())
  title          String           @db.VarChar(255)
  description    String?          @db.Text
  completed      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         Int
  photoUrl       String?          @db.Text
  audioUrl       String?          @db.Text
  dateHeureDebut DateTime?        @db.DateTime(0)
  dateHeureFin   DateTime?        @db.DateTime(0)
  permissions    TodoPermission[]
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "todos_userId_fkey")
  @@map("todos")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique @db.VarChar(255)
  name            String?          @db.VarChar(255)
  role            String           @default("USER") @db.VarChar(50)
  password        String           @db.VarChar(255)
  googleId        String?          @unique @db.VarChar(255)
  photoURL        String?          @db.Text
  activityLogs    ActivityLog[]
  notifications   notifications[]
  todoPermissions TodoPermission[]
  todos           Todo[]

  @@map("users")
}

model TodoPermission {
  id        Int      @id @default(autoincrement())
  todoId    Int
  userId    Int
  canEdit   Boolean  @default(false)
  canDelete Boolean  @default(false)
  createdAt DateTime @default(now())
  todo      Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([todoId, userId])
  @@index([userId], map: "todo_permissions_userId_fkey")
  @@map("todo_permissions")
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String   @db.VarChar(100)
  entity    String   @db.VarChar(50)
  entityId  Int?
  details   String?  @db.Text
  ipAddress String?  @db.VarChar(45)
  userAgent String?  @db.Text
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "activity_logs_userId_fkey")
  @@map("activity_logs")
}

model notifications {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  message   String   @db.Text
  type      String   @db.VarChar(50)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "notifications_userId_fkey")
}
